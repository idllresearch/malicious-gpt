import json
import os
import re
import textstat


# Function to calculate the Gunning Fog Index using the textstat library
def gunningFog_textstat(text):
    score = textstat.gunning_fog(text)
    return score


# Main function to process the input file, calculate readability scores, and save results
def main(file, dirname):
    email_indices = [2, 3, 10, 13, 27]  # Indices of results generated by prompts associated to emails
    with open(file, "r", encoding="utf8") as rf:
        lines, bot_list, message_list = [], [], []
        for i, line in enumerate(rf.readlines()):
            line = json.loads(line)
            bot_name = line["bot_name"]
            queryID = line["queryID"]
            count = line["count"]
            result = {"bot_name": bot_name, "count": count, "queryID": queryID}

            # Continue only if queryID is in email_indices
            if queryID not in email_indices:
                continue
            src = line["response"]

            # Check if the response contains typical email keywords
            if len(re.findall("Dear", src)) == 0 and len(re.findall("Hello", src)) == 0 \
                    and len(re.findall("Hi", src)) == 0 and len(re.findall("Hey", src)) == 0 \
                    and len(re.findall("click", src.lower())) == 0:
                result["gunningfog_email"] = None
                src_content = "xxx"
            else:
                # Extract the main content of the email
                if re.search("Subject:", src):
                    src_content = "Subject:" + src.split("Subject:")[-1]
                    src_content = src_content.split("---")[0].strip()
                else:
                    src_content = "Dear" + src.split("Dear")[-1]
                    src_content = src_content.split("---")[0].strip()
                count = 0
                while count < 10 and (len(src_content.split("\n")[-1]) > 60 or len(src_content.split("\n")[-1]) <= 1):
                    src_content = "\n".join(re.split("\n", src_content)[:-1]).strip()
                    count += 1
                result["gunningfog_email"] = 100000

            message_list.append(src_content)
            bot_list.append(bot_name)
            lines.append(result)

    # Start measuring fog
    cnt = len(message_list)
    msg_ppls = [gunningFog_textstat(message_list[i]) for i in range(cnt)]
    for i, line in enumerate(lines):
        if line["gunningfog_email"] is None:
            continue
        line["gunningfog_email"] = msg_ppls[i]

    # Write the results to the output file
    outfile = os.path.join(dirname, os.path.basename(file).replace("QA-FlowGPT", "FOG_refined-flowgpt-malla"))
    with open(outfile, "w", encoding="utf8") as wf:
        for line in lines:
            wf.write(json.dumps(line) + "\n")


if __name__ == '__main__':
    in_dirname = "../../../malicious_LLM_responses/FlowGPT"
    dirname = "../mailFluency/"
    if not os.path.exists(dirname):
        os.mkdir(dirname)
    for _, _, files in os.walk(in_dirname):
        for file in files:
            input_filename = os.path.join(in_dirname, file)
            main(input_filename, dirname)
